void fix_set_diag(fix_matrix A, int val) {
  long i;
  for (i = 0; i < N; i++)
    A[i][i] = val;
}

When compiled with optimization level -O1, gcc generates the following
assembly code:
1 fix_set_diag:
void fix_set_diag(fix_matrix A, int val)
A in %rdi, val in %rsi
2 movl $0, %eax
3 .L13:
4 movl %esi, (%rdi,%rax)
5 addq $68, %rax
6 cmpq $1088, %rax
7 jne .L13
8 rep; ret

Create a C code program fix_set_diag_opt that uses optimizations similar
to those in the assembly code, in the same style as the code in Figure 3.37(b). Use
expressions involving the parameter N rather than integer constants, so that your
code will work correctly if N is redefined.

My Answer:
void fix_set_diag_opt(fix_matrix A, int val) {
  int *Aptr = $A[0][0];
  int *Bend = $A[N][N];
  do {
    *Aptr = val;
    Aptr += (N + 1);
  } while (Aptr != Bend);
}


Solution: 
Abase는 $A[0][0]를 저장하는 포인터로 일차원 배열처럼 사용할 수 있다.
void fix_set_diag)opt(fix_matrix A, int val) {
  int *Abase = $A[0][0];
  int i = 0;
  int end = N * (N + 1);
  do {
    *Abase[i] = val;
    i += (N + 1);
  } while (i != end)
}