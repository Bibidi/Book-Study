short dw_loop(short x) {
  short y = x/9;
  short *p = &x;
  short n = 4*x;
  do {
    x += y;
    (*p) += 5;
    n -= 2;
  } while (n > 0);
  return x;
}

short dw_loop(short x)
x initially in %rdi
1   dw_loop:
2   movq %rdi, %rbx
3   movq %rdi, %rcx
4   idivq $9, %rcx
5   leaq (,%rdi,4), %rdx
6 .L2:
7   leaq 5(%rbx,%rcx), %rcx
8   subq $2, %rdx
9   testq %rdx, %rdx
10  jg .L2
11 rep; ret

A: x는 %rbx, y는 %rcx, n은 %rdx에 저장되었다.
B: (*p) += 5는 x += 5와 같으므로 추가로 레지스터를 사용할 필요가 없다. %rbx에 바로 계산하면 된다.
C: 
dw_loop:
    movw %di, %bx        # %bx = x (16비트)
    movsxw %di, %cx      # %cx = x (sign-extend)
    idivw $9, %cx        # %cx = x / 9 (16비트 나눗셈)

    movw %di, %dx        # %dx = x
    salw $2, %dx         # %dx = 4 * x  (n = 4 * x)

.L2:
    leaw 5(%bx, %cx), %bx  # x = x + y + 5
    subw $2, %dx         # n -= 2
    testw %dx, %dx       # n이 0인지 확인
    jg .L2               # n > 0이면 반복

    movw %bx, %ax        # 반환값을 %ax에 저장
    ret

문제에 있던 어셈블리 코드는 많은 곳을 틀렸다. 위와 같은 형식이 되어야 한다.